{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","class","className","src","alt","name","address","city","state","zipCode","category","rate","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","handleSortByChange","sortByOption","searchYelp","term","location","setState","sortBy","handleTermChange","e","target","value","handleLocationChange","handleSearchClick","preventDefault","handleSearchEnter","renderSortByOptions","Object","keys","sortByOptions","sortByOptionValue","onClick","bind","getSortByClass","onKeyPress","onChange","placeholder","href","Yelp","fetch","headers","Authorization","then","response","json","jsonResponse","console","log","imageSrc","image_url","address1","categories","title","rating","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b699911.chunk.js","sourcesContent":["import React from 'react';\nimport './Business.css';\n\n\nclass Business extends React.Component {\n    render() {\n        const { business } = this.props;\n        return (\n            <div class=\"Business\">\n                <div className=\"image-container\">\n                    <img src='https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg' alt=''/>\n                </div>\n                <h2>{business.name}</h2>\n                <div className=\"Business-information\">\n                    <div className=\"Business-address\">\n                    <p>{business.address}</p>\n                    <p>{business.city}</p>\n                    <p>{business.state} {business.zipCode}</p>\n                    </div>\n                    <div className=\"Business-reviews\">\n                    <h3>{business.category}</h3>\n                    <h3 className=\"rating\">{business.rate} stars</h3>\n                    <p>{business.reviewCount} reviews</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Business;","import React from 'react';\nimport './BusinessList.css';\nimport Business from '../Business/Business';\n\nclass BusinessList extends React.Component {\n    render() {\n        return (\n            <div className=\"BusinessList\">\n                {\n                    this.props.businesses.map((business) => {\n                        /* after we have real data, add a key property */\n                        return <Business key={business.id} business={business} />;\n                    })\n                } \n            </div>\n        );\n    }\n}\n\nexport default BusinessList;","import React from \"react\";\nimport \"./SearchBar.css\";\n\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      term: \"\",\n      location: \"\",\n      sortBy: \"best_match\"\n\n    };\n    this.sortByOptions = {\n      \"Best Match\": \"best_match\",\n      \"Highest Rated\": \"rating\",\n      \"Most Reviewed\": \"review_count\"\n    };\n  }\n\n  getSortByClass(sortByOption) {\n    if (this.state.sortBy === sortByOption) {\n      return \"active\";\n    } \n    return \"\";\n    //this.state.sortBy === sortByOption ? \"active\" : \"\"; -> raises ESLint error, can be fixed w/ if/else statement or disabling no-unused-expressions\n  }\n\n  handleSortByChange = (sortByOption) => {\n    this.props.searchYelp(this.state.term, this.state.location, sortByOption);\n    this.setState({sortBy: sortByOption});\n  }\n\n  handleTermChange = (e) => {\n    this.setState({term: e.target.value});\n  }\n\n  handleLocationChange = (e) => {\n    this.setState({location: e.target.value});\n  }\n\n  handleSearchClick = (e) => {\n    this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n    e.preventDefault(); //to prevent the default action of clicking a link from triggering at the end of the method\n  }\n\n  handleSearchEnter = (e) => {\n    if (e.key === \"Enter\") {\n      this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\n      e.preventDefault();\n    }\n  }\n\n  renderSortByOptions = () => {\n    return Object.keys(this.sortByOptions).map(sortByOption => {\n      let sortByOptionValue = this.sortByOptions[sortByOption];\n      return <li key={sortByOptionValue} onClick={this.handleSortByChange.bind(this, sortByOptionValue)} className={this.getSortByClass(sortByOptionValue)}>{sortByOption}</li>\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"SearchBar\" onKeyPress={this.handleSearchEnter}>\n        <div className=\"SearchBar-sort-options\">\n          <ul>\n            {this.renderSortByOptions()}\n          </ul>\n        </div>\n        <div className=\"SearchBar-fields\">\n          <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" />\n          <input onChange={this.handleLocationChange} placeholder=\"Where?\" />\n        </div>\n        <div className=\"SearchBar-submit\">\n          <a onClick={this.handleSearchClick} href=\"foo\" >Let's Go</a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;","import SearchBar from \"../components/SearchBar/SearchBar\";\n\n/* create Yelp API v3 credentials and add credentials to Yelp.js */\nconst apiKey = 'ff3CaiKPth6YCpr7eW4GhNuK0_QKoTIpETPswX4RVBAOj0I28rhbaLTFi60TBDK0txzaP1kvwVdSe2PaE-iCxqS6oM-1FVL6j0JbW63NrrqN-h7CHteYntL3AerEXXYx';\n\n/* create YELP module */\nconst Yelp = {\n    /* create search() */\n    searchYelp(term, location, sortBy) {\n        /* fetch() will not function due to CROS restrictions */\n        return fetch(`https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\n            headers: {\n                Authorization: `Bearer ${apiKey}` \n            },\n        }).then(response => {\n            return response.json();\n        }).then((jsonResponse) => {\n            if (jsonResponse.businesses) {\n                console.log(jsonResponse.businesses);\n                return jsonResponse.businesses.map(((business) => {\n                    console.log(business);\n                    /* Accessing the JSON Response */\n                    return {\n                        id: business.id,\n                        imageSrc: business.image_url,\n                        name: business.name,\n                        address: business.location.address1,\n                        city: business.location.city,\n                        state: business.location.state,\n                        zipCode: business.location.zipCode,\n                        category: business.categories[0].title,\n                        rating: business.rating,\n                        reviewCount: business.reviewCount\n                    }\n                }));\n            }\n        });\n    }\n}\n \nexport default Yelp;\n","import React from 'react';\nimport './App.css';\nimport BusinessList from './components/BusinessList/BusinessList';\nimport SearchBar from './components/SearchBar/SearchBar';\nimport Yelp from './util/Yelp';\n\n/*\nHard code example for Businesses:\n\nconst business = {\n  imageSrc: 'https://s3.amazonaws.com/codecademy-content/programs/react/ravenous/pizza.jpg',\n  name: 'Luca Pizzeria',\n  address: '1010 Paddington Way',\n  city: 'Flavortown',\n  state: 'NY',\n  zipCode: '10101',\n  category: 'Italian',\n  rating: 4.5,\n  reviewCount: 90\n}\n\nconst businesses = [business, business, business, business, business, business];\n\n*/\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      businesses: []\n    }\n\n    this.searchYelp = this.searchYelp.bind(this);\n  }\n  searchYelp(term, location, sortBy) {\n    console.log(`Searching Yelp with ${term}, ${location}, ${sortBy}`);\n    \n   Yelp.searchYelp(term, location, sortBy).then(businesses => {\n      this.setState( {businesses: businesses});\n   });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>ravenous</h1>\n        <SearchBar  searchYelp= {this.searchYelp}/>\n        <BusinessList businesses = {this.state.businesses}/> \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}